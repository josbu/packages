name: Compile packages and Build images

on:
  workflow_call:
    inputs:
      build_mode:
        required: false
        type: string
      compiles:
        required: false
        type: string
      no_img:
        required: false
        type: boolean
      GHPAGES_PATH:
        required: true
        type: string
      OP_VERSION:
        required: true
        type: string
      BOARD:
        required: false
        type: string
      SUBTARGET:
        required: false
        type: string
      MODEL:
        required: false
        type: string
      ARCH:
        required: true
        type: string
      USIGN_ID:
        required: true
        type: string
      GPG_ID:
        required: false
        type: string

env:
# 使用 GPG 签名 Packages (非必要)
  GPG_SIGN: true
# Cache Libraries
  CACHE_DOWNLOAD: true
# 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: true
# Artifact retention days
  ARTIFACT_RETENTION_DAYS: 3
### 结束

jobs:
  compile:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To push a branch
      # pull-requests: write  # To create a PR from that branch
    env:
      OP_VERSION: ${{ inputs.OP_VERSION }}
      USIGN_ID: ${{ inputs.USIGN_ID }}
      USIGN_KEY: ${{ secrets[format('USIGN_{0}', inputs.USIGN_ID )] }}
      USIGN_PUBKEY: ${{ vars[format('USIGN_PUB_{0}', inputs.USIGN_ID )] }}
      VERIFY_KEY_ID: ${{ vars.VERIFY_KEY_ID }}
      GPG_ID: ${{ inputs.GPG_ID }}
      GPG_PW: ${{ secrets[format('GPG_PW_{0}', inputs.GPG_ID )] }}
      GPG_KEY: ${{ secrets[format('GPG_{0}', inputs.GPG_ID )] }}
      GPG_PUBKEY: ${{ vars[format('GPG_PUB_{0}', inputs.GPG_ID )] }}
      GPG_FINGER: ${{ vars[format('GPG_FING_{0}', inputs.GPG_ID )] }}
      FTSPKGPREFIX: fantasticpackages_

    steps:
      - name: Maximize Build Space
        if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 20480
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          mkdir -p "/workdir/DL"

      - name: Determine branch name
        run: |
          BRANCH="${OP_VERSION%.*}"
          echo "Building for $BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Check ${{ env.BRANCH }} if deployed
        run: |
          rcode=$(curl -sL -w '%{http_code}' -o /dev/null https://github.com/$GITHUB_REPOSITORY/tree/$BRANCH)
          if [ "$rcode" != "404" ]; then
            echo Branch $BRANCH is deployed. will be used.
            BUILDBRANCH="$BRANCH"
          else
            echo Branch $BRANCH is not deployed, branch $GITHUB_REF_NAME will be used.
            BUILDBRANCH="$GITHUB_REF_NAME"
          fi
          echo "BUILDBRANCH=$BUILDBRANCH" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILDBRANCH }}
          lfs: true
          submodules: true

      - name: Import keys
        shell: bash
        run: |
          # gpg
          gpg --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" --import <(echo "${GPG_KEY}")
          gpg --import-ownertrust <<< "${GPG_FINGER//[[:space:]]/}:6:"

      - name: Cache DL dependencies
        if: env.CACHE_DOWNLOAD == 'true' && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        uses: actions/cache@v4
        with:
          path: /workdir/DL
          key: ${{ runner.os }}-OpenWRT-SDK-DL-Cache-Makefile-${{ hashFiles('**/Makefile') }}
          #key: ${{ runner.os }}-DL-${{ github.ref_name }}-${{ hashFiles('Makefile') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-OpenWRT-SDK-DL-Cache-Makefile-
          #restore-keys: |
          #  ${{ runner.os }}-DL-${{ github.ref_name }}-${{ hashFiles('Makefile') }}-
          #  ${{ runner.os }}-DL-${{ github.ref_name }}-

      - name: Determine EXTRA_FEEDS and PACKAGES
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        shell: bash
        env:
          EXTRA_FEEDS: >-
            src-link|${{ env.FTSPKGPREFIX }}packages|/feed/feeds/packages/
            src-link|${{ env.FTSPKGPREFIX }}luci|/feed/feeds/luci/
          SPECIAL_FEEDS: >-
            src-link|${{ env.FTSPKGPREFIX }}special|${{ github.workspace }}/feeds/special/
        run: |
          # EXTRA_FEEDS
          echo "Feeds: $EXTRA_FEEDS"
          echo "EXTRA_FEEDS=$EXTRA_FEEDS" >> $GITHUB_ENV
          # SPECIAL_FEEDS
          echo "SpecFeeds: $SPECIAL_FEEDS"
          echo "SPECIAL_FEEDS=$SPECIAL_FEEDS" >> $GITHUB_ENV
          # PACKAGES and SPECIALS
          _packages="$(ls -1 $GITHUB_WORKSPACE/feeds/packages/ | tr '\n' ' ')"
          _luci="$(ls -1 $GITHUB_WORKSPACE/feeds/luci/ | tr '\n' ' ')"
          _special="$(ls -1 $GITHUB_WORKSPACE/feeds/special/ | tr '\n' ' ')"
          _all="$_packages $_luci"
          _manual=''
          _specmanual=''
          for _p in ${{ inputs.compiles }}; do
            [ -z "$(find "$GITHUB_WORKSPACE/feeds" -maxdepth 2 -name $_p 2>/dev/null)" ] && continue
            [ -e "$GITHUB_WORKSPACE/feeds/special/$_p" ] \
              && _specmanual="${_specmanual:+$_specmanual }$_p" \
              || _manual="${_manual:+$_manual }$_p"
          done
          PACKAGES="${_manual:-$([ -n "$_specmanual" ] && echo fantastic-keyring || echo $_all)}"
          echo "Building: $PACKAGES"
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
          SPECIALS="${_specmanual:-$([ -n "$_manual" ] && echo '' || echo $_special)}"
          echo "SpecBuilding: $SPECIALS"
          echo "SPECIALS=$SPECIALS" >> $GITHUB_ENV

      - name: Checkout Releases
        id: checkout_releases
        env:
          Branch: gh-pages
        shell: bash
        run: |
          git fetch --no-tags --prune --no-recurse-submodules --depth=1 origin $Branch
          git checkout origin/$Branch -- ${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/ 2>/dev/null || echo
          echo "mv ${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/<feeds> to /workdir/bin/packages/${{ inputs.ARCH }}/${FTSPKGPREFIX}<feeds>"
          mkdir -p "/workdir/bin/packages/${{ inputs.ARCH }}" 2>/dev/null
          if [ -d "${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}" ]; then
            pushd ${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}
            find * -maxdepth 0 -type d 2>/dev/null | xargs -I{} mv "{}" "/workdir/bin/packages/${{ inputs.ARCH }}/${FTSPKGPREFIX}{}"
            popd
          fi

      - name: Build Specials
        id: build_specials
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        shell: bash
        run: |
          grep -q '^\s*$' <<< "$SPECIALS" && exit 0
          group() {
            endgroup
            echo "::group::  $1"
            GROUP=1
          }
          endgroup() {
            if [ -n "$GROUP" ]; then
              echo "::endgroup::"
            fi
            GROUP=
          }
          trap 'endgroup' ERR
          #
          group "Initialize Environment"
          sudo apt update
          sudo apt -y install axel build-essential ccache clang curl flex bison g++ gawk \
          gcc-multilib g++-multilib genisoimage gettext git libdw-dev libelf-dev \
          libncurses5-dev libssl-dev locales pv pwgen python3 python3-pip \
          python3-setuptools qemu-utils rsync signify-openbsd subversion swig unzip \
          zlib1g-dev file wget zstd python3-venv python3-pyelftools python3-cryptography \
          libbpf-dev libdw-dev libelf-dev zlib1g-dev
          endgroup
          # pushd SPECIAL_WORKDIR
          mkdir -p SPECIAL_WORKDIR
          pushd SPECIAL_WORKDIR
          #
          group "Download SDK"
          op_target_url_prefix="https://downloads.openwrt.org/releases/$OP_VERSION/targets/${{ inputs.BOARD }}/${{ inputs.SUBTARGET }}"
          sha256sums="$(curl -L "${op_target_url_prefix}/sha256sums")"
          sdk="$(sed -n '/\bsdk\b/{s|^[[:xdigit:]]*\s*\*||;p}' <<< "$sha256sums")"
          axel -q -n8 "${op_target_url_prefix}/${sdk}"
          tar $(echo "$sdk" | grep -qE '\.tar\.zst$' && echo '-I zstd') -xf "$sdk" && rm -f "$sdk"
          mv *-sdk-* SDK
          endgroup
          #
          group "Initialize SDK"
          # bin
          ln -s "/workdir/bin" SDK/bin
          # dl
          rm -rf SDK/dl
          ln -s "/workdir/DL" SDK/dl
          # feeds.conf.default
          for SPECIAL_FEED in $SPECIAL_FEEDS; do
            tr '|' ' ' <<< "$SPECIAL_FEED" >> SDK/feeds.conf.default
          done
          cat SDK/feeds.conf.default
          # key-build
          echo "$USIGN_KEY" > SDK/key-build
          echo "$USIGN_PUBKEY" > SDK/key-build.pub
          endgroup
          # Build start
          NPROC=$(nproc)
          pushd SDK
          #
          group "scripts/feeds update -a"
          scripts/feeds update -a
          endgroup
          #
          group "scripts/feeds install $SPECIALS"
          scripts/feeds install $SPECIALS
          endgroup
          #
          group "make defconfig"
          make defconfig
          endgroup
          #
          group "make package/*/compile V=s -j$NPROC"
          for PKG in $SPECIALS; do
            make "package/$PKG/compile" \
              BUILD_LOG=y \
              IGNORE_ERRORS="$IGNORE_ERRORS" \
              CONFIG_AUTOREMOVE=y \
              V=s \
              -j$NPROC
          done
          endgroup
          #
          group "make package/index"
          make package/index
          endgroup
          # Build done
          popd
          # popd SPECIAL_WORKDIR
          popd

      - name: Setup tmate session
        if: ${{ failure() && steps.build_specials.conclusion == 'failure' }}
        uses: mxschmitt/action-tmate@v3

      - name: Upload Specials
        if: ${{ failure() && steps.build_specials.conclusion == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: Specials-SDK-${{ hashFiles('**/Makefile') }}
          path: ${{ github.workspace }}/SPECIAL_WORKDIR/SDK

      - name: Build Packages
        id: build_packags
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        uses: fantastic-packages/gh-action-sdk@23.05
        env:
          #ARCH: ${{ inputs.ARCH }}-${{ env.OP_VERSION }}
          ARCH: ${{ inputs.ARCH }}-${{ env.BRANCH }}-SNAPSHOT
          ARTIFACTS_DIR: /workdir
          DL_DIR: /workdir/DL
          FEED_DIR: ${{ github.workspace }}
          EXTRA_FEEDS: ${{ env.EXTRA_FEEDS }}
          NO_REPO_FEEDS: 1
          NO_SHFMT_CHECK: 1
          PACKAGES: ${{ env.PACKAGES }}
          INDEX: 1
          KEY_BUILD: ${{ env.USIGN_KEY }}
          V: 99

      - name: Upload error logs
        if: ${{ failure() && steps.build_packags.conclusion == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-${{ hashFiles('**/Makefile') }}
          path: /workdir/logs

      - name: Checkout Packages
        id: checkout_packags
        shell: bash
        if: (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_pkgs') && !cancelled()
        run: |
          sign_packages() {
            # gpg
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              gpg -u ${GPG_ID} --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" -a -o Packages.asc --detach-sign Packages
            fi
          }
          #
          mkdir -p "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}" 2>/dev/null
          if [ -d "/workdir/bin" ]; then
            sudo chown -R $USER:$GROUPS /workdir/bin
            rm -rf   "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/packages" 2>/dev/null
            rm -rf   "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/luci" 2>/dev/null
            rm -rf   "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/special" 2>/dev/null
            mkdir -p "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/" 2>/dev/null
            for FEED in $EXTRA_FEEDS $SPECIAL_FEEDS; do
              feed=$(cut -f2 -d'|' <<< "$FEED")
              if [ -d "/workdir/bin/packages/${{ inputs.ARCH }}/$feed" ]; then
                echo "cp /workdir/bin/packages/${{ inputs.ARCH }}/$feed to $GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/${feed/$FTSPKGPREFIX/}"
                cp -Rf "/workdir/bin/packages/${{ inputs.ARCH }}/$feed" "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/${feed/$FTSPKGPREFIX/}"
                pushd "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/${{ inputs.ARCH }}/${feed/$FTSPKGPREFIX/}"; sign_packages; popd
              fi
            done
            #
            pushd "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH"
            echo "$USIGN_PUBKEY" > ${USIGN_ID,,}.pub
          cat <<- EOF > ${USIGN_ID,,}.sh
          #!/bin/sh
          KEYID=${USIGN_ID,,}
          mkdir -p /etc/opkg/keys 2>/dev/null
          cat <<- PUBKEY > /etc/opkg/keys/\${KEYID}
          ${USIGN_PUBKEY}
          PUBKEY
          EOF
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              echo "${GPG_FINGER}" > ${GPG_ID}.gpg.finger
              echo "${GPG_PUBKEY}" > ${GPG_ID}.gpg.pub
              cp -f "$GITHUB_WORKSPACE/keys/gpg/${GPG_ID}.rev" ${GPG_ID}.gpg.rev
            fi
            popd
            # Clean images output dir
            rm -rf /workdir/bin/targets 2>/dev/null
          fi

      - name: Display structure of downloaded files (${{ env.BRANCH }}, ${{ inputs.ARCH }})
        if: ${{ steps.checkout_packags.outcome == 'success' || steps.checkout_releases.outcome == 'success' }}
        run: ls -R
        working-directory: /workdir/bin/packages/

      - name: Determine packages be installed
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        shell: bash
        run: |
          INSTALLS=$(cat "$GITHUB_WORKSPACE/.github/workflows/prebuildpackages/generic" | tr '\n' ' ')
          INSTALLS=${INSTALLS:+$INSTALLS }$(cat "$GITHUB_WORKSPACE/.github/workflows/prebuildpackages/${{ inputs.ARCH }}" 2>/dev/null | tr '\n' ' ')
          echo "Installing: $INSTALLS"
          echo "INSTALLS=$INSTALLS" >> $GITHUB_ENV

      - name: Gen KEY_VERIFY
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        shell: bash
        run: |
          KEY_VERIFY=''
          for k in ${VERIFY_KEY_ID}; do
            key="$(cat "$GITHUB_WORKSPACE/keys/usign/${k^^}.pub" | base64)"
            KEY_VERIFY="${KEY_VERIFY:+$KEY_VERIFY }${key//[[:space:]]/}"
          done
          echo "KEY_VERIFY=$KEY_VERIFY"
          echo "KEY_VERIFY=$KEY_VERIFY" >> $GITHUB_ENV

      - name: Build Images
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        uses: fantastic-packages/gh-action-imagebuilder@23.05
        env:
          ARCH: ${{ inputs.BOARD }}-${{ inputs.SUBTARGET }}-${{ env.OP_VERSION }}
          PROFILE: ${{ inputs.MODEL }}
          ARTIFACTS_DIR: /workdir
          REPO_DIR: /workdir/bin/packages/${{ inputs.ARCH }}
          EXTRA_REPOS: >-
            src|${{ env.FTSPKGPREFIX }}packages|file:///repo/${{ env.FTSPKGPREFIX }}packages
            src|${{ env.FTSPKGPREFIX }}luci|file:///repo/${{ env.FTSPKGPREFIX }}luci
            src|${{ env.FTSPKGPREFIX }}special|file:///repo/${{ env.FTSPKGPREFIX }}special
          NO_LOCAL_REPOS: 1
          KEY_BUILD: ${{ env.USIGN_KEY }}
          KEY_BUILD_PUB: ${{ env.USIGN_PUBKEY }}
          KEY_VERIFY: ${{ env.KEY_VERIFY }}
          PACKAGES: ${{ env.INSTALLS }}
          ROOTFS_SIZE: 256

      - name: Checkout Images
        shell: bash
        if: inputs.no_img == 0 && (inputs.build_mode == 0 || inputs.build_mode == 'build_pkgs_and_imgs' || inputs.build_mode == 'build_imgs') && !cancelled()
        run: |
          if [ -d "/workdir/bin" ]; then
            sudo chown -R $USER:$GROUPS /workdir/bin
            rm -rf   "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/targets/${{ inputs.BOARD }}/${{ inputs.SUBTARGET }}" 2>/dev/null
            mkdir -p "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/targets/${{ inputs.BOARD }}/" 2>/dev/null
            echo "mv /workdir/bin/targets/${{ inputs.BOARD }}/${{ inputs.SUBTARGET }} to $GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/targets/${{ inputs.BOARD }}/${{ inputs.SUBTARGET }}"
            mv -f "/workdir/bin/targets/${{ inputs.BOARD }}/${{ inputs.SUBTARGET }}" "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/targets/${{ inputs.BOARD }}/${{ inputs.SUBTARGET }}"
            pushd "$GITHUB_WORKSPACE/${{ inputs.GHPAGES_PATH }}/$BRANCH/targets/${{ inputs.BOARD }}/${{ inputs.SUBTARGET }}"
            if [ "${{env.GPG_SIGN}}" == "true" ]; then
              gpg -u ${GPG_ID} --batch --pinentry-mode=loopback --yes --passphrase "$(echo -n "${GPG_PW}")" -a -o sha256sums.asc --detach-sign sha256sums
            fi
            popd
          fi

      - name: Generate artifact name and clean up irrelevant packages
        run: |
          echo "artifact=OpenWRT-Build-$OP_VERSION-${{ inputs.ARCH }}-${{ inputs.BOARD }}-${{ inputs.SUBTARGET }}-${{ inputs.MODEL }}" >> $GITHUB_ENV
          find ${{ inputs.GHPAGES_PATH }}/* -maxdepth 0 2>/dev/null | grep -v "$BRANCH" | xargs -I{} rm -rf "{}"
          find ${{ inputs.GHPAGES_PATH }}/$BRANCH/packages/* -maxdepth 0 2>/dev/null | grep -v "${{ inputs.ARCH }}" | xargs -I{} rm -rf "{}"
          find ${{ inputs.GHPAGES_PATH }}/$BRANCH/targets/* -maxdepth 0 2>/dev/null | grep -v "${{ inputs.BOARD }}" | xargs -I{} rm -rf "{}"
          find ${{ inputs.GHPAGES_PATH }}/$BRANCH/targets/${{ inputs.BOARD }}/* -maxdepth 0 2>/dev/null | grep -v "${{ inputs.SUBTARGET }}" | xargs -I{} rm -rf "{}"

      - name: Display structure of upload files (${{ env.OP_VERSION }}, ${{ inputs.ARCH }}, ${{ inputs.BOARD }}-${{ inputs.SUBTARGET }})
        run: ls -R
        working-directory: ${{ inputs.GHPAGES_PATH }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}
          path: |
            ${{ inputs.GHPAGES_PATH }}/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Fix permissions of DL
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo chmod -R o+r /workdir/DL/
